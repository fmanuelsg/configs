extends cfamily

snippet perl "Perl initial boilerplate" w
#!/usr/bin/env perl

use strict;
use warnings;
endsnippet

#
# Selection.
#

# Redefinition
snippet iff "if and only if (one sentence)" !w
${VISUAL:/;$//}$1 if ${2:\$ok};
endsnippet

snippet xunless "Conditional one-line (unless)"
${1:expression} unless ${2:condition};
endsnippet

# Redefinition.
snippet elsif "elsif {...}" !w
elsif (${1:true}) {
	${VISUAL}$2
}$0
endsnippet

#
# Loops.
#

snippet fore "foreach"
foreach ${1:my $${2:x}} (@${3:array}) {
	${4:# body...}
}
endsnippet

snippet sub "Subroutine"
sub ${1:function_name} {
	${2:# body...}
}$0
endsnippet

snippet xfore "Loop one-line (xforeach)"
${1:expression} foreach @${2:array};
endsnippet

snippet xwhile "Loop one-line (xwhile)"
${1:expression} while ${2:condition};
endsnippet

snippet test "Test"
#!/usr/bin/env perl -w

use strict;
use Test::More tests => ${1:1};
use ${2:ModuleName};

ok(${3:assertion});
endsnippet

snippet class "class"
package ${1:ClassName};

${2:use base qw(${3:ParentClass});}${2/.+/\n\n/}sub new {
	my $class = shift;
	$class = ref $class if ref $class;
	my $self = bless {}, $class;
	$self;
}

1;

endsnippet

snippet eval "eval"
eval {
	${1:# do something risky...}
};
if ($@) {
	${2:# handle failure...}
}

endsnippet

snippet for "for"
for (my $${1:var} = 0; $$1 < ${2:expression}; $$1++) {
	${3:# body...}
}

endsnippet

snippet slurp "slurp"
my $${1:var} = do { local $/ = undef; open my $fh, '<', ${2:$file}; <$fh> };
endsnippet

snippet unless "unless"
unless ($1) {
	${2:# body...}
}
endsnippet

# vim:ft=snippets:
