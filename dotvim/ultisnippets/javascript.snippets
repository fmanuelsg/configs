#
# Functions
#
snippet fun "function (named)" w
function ${1:name} (${2:argument})
{
	${VISUAL}$0
}
endsnippet

snippet f "function (anonymous)" w
function(${1:argument}) {
	${VISUAL}$0
}
endsnippet

#
# Selection
#
snippet if "if"
if (${1:true}) {
	${VISUAL}$0
}
endsnippet

# Mnemonic: iff means if and only if (in math), so it's one sentence and no brackets
snippet iff "if and only if (one sentence)"
if (${1:true})
	${VISUAL}$0
endsnippet

snippet ife "if else" w
if (${1:true}) {
	${2:${VISUAL}}
}
else {
	$0
}
endsnippet

snippet switch "switch case"
switch (${1:condition}) {
	case $2:
		break;
	${3:default:}
		$0
}
endsnippet

snippet case "additional case"
case $1:
	$0
	break;
endsnippet

#
# Repetition
#
snippet for "for (...) {...} (faster)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--){
	${3:$1[$2]}$0
}
endsnippet

snippet for "for (...) {...}"
for (var ${2:i}=0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}$0
}
endsnippet

#
# Common
#
snippet log "console.log" w
console.log($0);
endsnippet

#####

snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element){
	$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}){
	$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}:${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) ,,{
	${0:// body...}
};
 
endsnippet


# vim:ft=snippets:
